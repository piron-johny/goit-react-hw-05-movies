{"version":3,"file":"static/js/408.c213b154.chunk.js","mappings":"4TAEaA,EAAW,mCAAG,6GAEJC,IAAAA,IAAA,4FAFI,cAEjBC,EAFiB,yBAGhBA,EAAKA,KAAKC,SAHM,gCAKxBC,QAAQC,IAAI,QAAZ,MALwB,yDAAH,qDASXC,EAAe,mCAAG,WAAOC,GAAP,gGAERN,IAAAA,IAAA,6CAAgDM,EAAhD,8CAFQ,cAErBL,EAFqB,yBAGpBA,EAAKA,MAHe,gCAK3BE,QAAQC,IAAI,QAAZ,MAL2B,yDAAH,sDASfG,EAAgB,mCAAG,WAAOD,GAAP,gGAETN,IAAAA,IAAA,6CAAgDM,EAAhD,sDAFS,cAEtBL,EAFsB,yBAGrBA,EAAKA,KAAKC,SAHW,gCAK5BC,QAAQC,IAAI,QAAZ,MAL4B,yDAAH,sDAShBI,EAAc,mCAAG,WAAOF,GAAP,gGAEPN,IAAAA,IAAA,6CAAgDM,EAAhD,sDAFO,cAEpBL,EAFoB,yBAGnBA,EAAKA,MAHc,gCAK1BE,QAAQC,IAAI,QAAZ,MAL0B,yDAAH,sDASdK,EAAkB,mCAAG,WAAOC,GAAP,gGAEXV,IAAAA,IAAA,mGAAsGU,IAF3F,cAExBT,EAFwB,yBAGvBA,EAAKA,KAAKC,SAHa,gCAK9BC,QAAQC,IAAI,QAAZ,MAL8B,yDAAH,uD,wHCI/B,UAtCmB,WACjB,IAAMO,GAAWC,EAAAA,EAAAA,MACTC,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAwCF,EAAAA,EAAAA,UAAS,IAAjD,eAAOG,EAAP,KAAqBC,EAArB,KAEMC,EAAY,mCAAG,WAAOC,GAAP,8EACnBA,EAAEC,iBADiB,UAEMb,EAAAA,EAAAA,IAAmBO,GAFzB,OAEbO,EAFa,OAGnBJ,EAAgBI,GAChBZ,EAAS,UAAD,OAAWK,IAJA,2CAAH,sDAOlB,OACE,iCACIH,IAAY,4BACZ,4CACA,kBAAMW,SAAUJ,EAAhB,WACE,kBAAOK,KAAK,OAAOC,SAAU,SAACL,GAAD,OAAOJ,EAASI,EAAEM,OAAOX,WACtD,mBAAQS,KAAK,SAAb,qBAGDP,EAAaU,KAAI,SAAAC,GAAK,OACrB,yBACE,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKD,EAAMvB,IAAnB,SAA2BuB,EAAME,oBAF5BF,EAAMvB,WAQnB,SAAC,EAAA0B,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD","sources":["components/services/api.js","pages/MoviesPage.js"],"sourcesContent":["import axios from \"axios\";\n\nexport const fetchMovies = async () => {\n  try {\n    const data = await axios.get(`https://api.themoviedb.org/3/trending/movie/day?api_key=2cf91cf1fed5026ae9524dc97ad33068`);\n    return data.data.results\n  } catch (error) {\n   console.log('error', error) \n  }\n}\n\nexport const fetchMoviesById = async (id) => {\n  try {\n    const data = await axios.get(`https://api.themoviedb.org/3/movie/${id}?api_key=2cf91cf1fed5026ae9524dc97ad33068`);\n    return data.data\n  } catch (error) {\n    console.log('error', error)\n  }\n}\n\nexport const fetchReviewsById = async (id) => {\n  try {\n    const data = await axios.get(`https://api.themoviedb.org/3/movie/${id}/reviews?api_key=2cf91cf1fed5026ae9524dc97ad33068`);\n    return data.data.results\n  } catch (error) {\n    console.log('error', error)    \n  }\n}\n\nexport const fetchCastsById = async (id) => {\n  try {\n    const data = await axios.get(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=2cf91cf1fed5026ae9524dc97ad33068`);\n    return data.data\n  } catch (error) {\n    console.log('error', error)    \n  }\n}\n\nexport const fetchMoviesByQuery = async (query) => {\n  try {\n    const data = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=2cf91cf1fed5026ae9524dc97ad33068&query=${query}`);\n    return data.data.results\n  } catch (error) {\n    console.log('error', error)    \n  }\n}\n\n","import { Suspense, useState } from 'react';\nimport { Link, Outlet, useNavigate, useParams } from 'react-router-dom';\nimport { fetchMoviesByQuery } from '../components/services/api';\n\nconst MoviesPage = () => {\n  const navigate = useNavigate();\n  const { moviesId } = useParams();\n  const [value, setValue] = useState('')\n  const [searchMovies, setSearchMovies] = useState([])\n\n  const HandleSubmit = async (e) => {\n    e.preventDefault()\n    const searchData = await fetchMoviesByQuery(value)\n    setSearchMovies(searchData)\n    navigate(`?query=${value}`)\n  }\n\n  return (\n    <>\n      {!moviesId && <div>\n        <div>Search movies</div>\n        <form onSubmit={HandleSubmit}>\n          <input type=\"text\" onChange={(e) => setValue(e.target.value)} />\n          <button type='submiy'>Send</button>\n        </form>\n\n        {searchMovies.map(movie => (\n          <ul key={movie.id}>\n            <li>\n              <Link to={`${movie.id}`} >{movie.original_title}</Link>\n            </li>\n          </ul>\n        ))}\n\n      </div>}\n      <Suspense fallback={<div>Liading...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  )\n}\n\nexport default MoviesPage"],"names":["fetchMovies","axios","data","results","console","log","fetchMoviesById","id","fetchReviewsById","fetchCastsById","fetchMoviesByQuery","query","navigate","useNavigate","moviesId","useParams","useState","value","setValue","searchMovies","setSearchMovies","HandleSubmit","e","preventDefault","searchData","onSubmit","type","onChange","target","map","movie","to","original_title","Suspense","fallback"],"sourceRoot":""}